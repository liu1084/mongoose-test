{"version":3,"sources":["User.js"],"names":[],"mappings":"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","file":"User-compiled.js","sourcesContent":["/**\n * Created by liqing on 2016/4/27.\n */\nconst mongoose = require('mongoose');\nconst crypto = require('crypto');\nconst oAuthTypes = [\n    'google',\n    'github',\n    'twitter',\n    'facebook',\n    'linkedin'\n];\n\nconst Schema = mongoose.Schema;\nconst validatePresenceOf = value => value && value.length > 0;\nconst nameValidator = [\n    {\n        //name can not be empty\n        validator: function (name) {\n            return name.length > 0;\n        },\n        msg: 'Name can not be empty'\n    },\n    {\n        //name must be [a-z]+[0-9]*[_|-]\n        validator: function (name) {\n            var reg = new RegExp('^[a-z]+[0-9]*[_|-]*$', 'ig');\n            return reg.test(name);\n        },\n        msg: 'name must be include a-z, 0-9, _ and -'\n    }\n];\nconst emailValidator = [\n    {\n        validator: function (email) {\n            return email.length > 0;\n        }, msg: 'email can not be empty'\n    },\n    {\n        validator: function (email) {\n            return /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/.test(email);\n        }, msg: 'email must be xxx@xxx.xxx'\n    }\n];\n\n/**\n * Usr Schema\n */\nconst UserSchema = new Schema({\n    name: {type: String, default: '', trim: true, validate: nameValidator},\n    email: {type: String, default: '', trim: true, validate: emailValidator},\n    age: {type: Number, default: 0, min: [18, 'too little'], max: [100, 'maybe you are a GOD...']},\n    salt: {type: String, default: ''},\n    hash_password: {type: String, default: ''},\n    provider: {type: String, default: '', trim: true, enum: ['google', 'twitter', 'linkedin', 'facebook', 'github']}\n});\n\nUserSchema\n    .virtual('password')\n    .set(function (password) {\n        this._password = password;\n        this.salt = this.makeSalt();\n        this.hash_password = this.encryptPassword(password);\n    })\n    .get(function () {\n        return this._password;\n    });\n\nUserSchema.methods = {\n    /**\n     * encrypt password\n     * @param password\n     */\n    encryptPassword: function (password) {\n        if (!password) {\n            return '';\n        }\n\n        try {\n            return crypto\n                .createHmac('sha1', this.salt)\n                .update(password)\n                .digest('hex');\n        } catch (error) {\n            return '';\n        }\n    },\n    makeSalt: function () {\n        return Math.round((new Date().valueOf() * Math.random())) + '';\n    },\n\n    /**\n     * Authenticate -- Check password is the same.\n     * @param plainText\n     * @returns {boolean}\n     */\n    authenticate: function (plainText) {\n        return this.encryptPassword(plainText) === this.hash_password;\n    },\n\n    skipValidation: function () {\n        return ~oAuthTypes.indexOf(this.provider);\n    }\n};\n\n/**\n * Check user is existed.\n */\nvar User = mongoose.model('User', UserSchema);\nUserSchema.path('name').validate(function (value, response) {\n    var result = false;\n    User.findOne({name: value}, function (error, data) {\n        if (error) {\n            throw new Error(error);\n        }\n        if (data.length === 0) {\n            result = true;\n        }\n        response(result);\n    });\n}, 'name is already existed.');\n\n/**\n * Check email is existed.\n */\nUserSchema.path('email').validate(function (value, response) {\n    var result = false;\n    User.find({email: value}, function (error, data) {\n        if (error) {\n            throw new Error(error);\n        }\n        if (data.length === 0) {\n            result = true;\n        }\n        response(result);\n    });\n}, 'email is already existed.');\n\n/**\n * Check password is valid\n */\nUserSchema.path('hash_password').validate(function (value, response) {\n    if (this.skipValidation()) return true;\n    return this._password.length && value.length;\n}, 'password can not be empty');\n\n\n/**\n * Pre-save hook\n */\nUserSchema.pre('save', function (next) {\n    if (!this.isNew) {\n        next();\n    }\n\n    if (!validatePresenceOf() && !this.skipValidation()) {\n        next(new Error('invalid password'));\n    } else {\n        next();\n    }\n});\n\nUserSchema.statics = {\n    load: function (options, callback) {\n        options.select = options.select || 'name email';\n        return this.findOne(options.criteria)\n            .select(options.select)\n            .exec(callback);\n    }\n};\n\nmodule.exports = User;"]}